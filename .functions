#!/usr/bin/env bash

# Fuzzy find a directory and enter it
function d() {
	local dir=$(fd . "${HOME}" --exclude "${HOME}/Library/" --type d --max-depth=3 --color=never | fzf --select-1 --query "${*}");
	echo "Jumping to ${dir}";
	cd "${dir}" || return;
	ls -l
}

# Create a new directory and enter it
function md() {
	mkdir -p "$@" && cd "$_";
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
}

# Change to the git root directory
function cdgitroot() {
	local cdup="$(git rev-parse --show-cdup)";
	test -n "$cdup" && cd "$cdup"
}

# Tere: https://github.com/mgunyho/tere
function tere() {
	local result=$($HOME/.cargo/bin/tere "$@")
	[ -n "$result" ] && cd -- "$result"
}

# Yazi
# https://github.com/sxyazi/yazi
function ya() {
	tmp="$(mktemp -t "yazi-cwd.XXXXX")"
	yazi --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@";
	}
fi;

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Open a given port on localhost in the browser
function openport() {
	local port="${1:-8000}"
	open "http://localhost:${port}/"
}

# Kill whatever is LISTENing on a given port, e.g. killport 9200. (killport 9200 -9 if you want to be ugly)
function killport() {
	local port=$1
	shift 1
	lsof -i :$port | grep LISTEN | awk '{print $2}' | xargs kill $@
}

# Kill whatever is connected to a given port, servers, clients, whatever. (nukeport 9200 -9 if you want to be ugly)
function nukeport() {
	local port=$1
	shift 1
	lsof -i :$port -Fp | cut -dp -f2 | xargs kill $@
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	miniserve --port $port .
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# Sniff short-urls
function longurl() {
	curl --silent --location --head "$1" | grep -E "^Location: " | tail -n 1 | awk -F': ' '{print $2}'
}

# CATS
function catsay() {
	local input="${@}";
	local text=$(python -c "import sys, urllib as ul; print ul.quote('${input}');");
	curl --silent --output - "https://cataas.com/cat/says/${text}" | imgcat
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe';
	else
		alias open='xdg-open';
	fi
fi

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `e` with no arguments opens the current directory in Visual studio Code, otherwise
# opens the given location
function e() {
	if [ $# -eq 0 ]; then
        if [ -f Session.vim ]; then
            nvim -S Session.vim
        else
            nvim .
        fi
	else
		nvim "$@"
	fi
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git' --dirsfirst "$@" | less -FRNX;
}

# Rename the current Tab in iTerm, works also if it's running `tmux -CC`
function tabname() {
	if [ -z $TMUX ] ; then
		echo -ne "\033]0;"$@"\007"
	else
		tmux rename-window "$@"
	fi
}

# https://owen.cymru/fzf-ripgrep-navigate-with-bash-faster-than-ever-before-2/#update
fzf_log() {
	hash=$(git log --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" | fzf --ansi | awk '{print $1}')
	echo $hash | pbcopy
	git showtool $hash
}


function jdk() {
	eval $(jdkman "$@");
}

# Offer merged branches for deletion
function git-delete-merged() {
	# list branches that are merged when viewed from the current branch or whatever branch is given as the first argument
	git branch --color=always --no-column --merged $1 |
	  # only select branches that aren't special, i.e. checked out anywhere
	  grep --regexp='^  ' |
	  # remove the empty indicator columns
	  cut -c 3- |
	  # select any number of branches with a preview of what they are
	  fzf-tmux -- --ansi --print0 --multi --preview="git log {} --" |
	  # remove each branch with a prompt
	  xargs -0 -n1 git branch --delete
}

# Less safe versoin of git-delete-merged
function git-delete-merged-force() {
	# list branches that are merged when viewed from the current branch or whatever branch is given as the first argument
	git branch --color=always --no-column --merged $1 |
	  # only select branches that aren't special, i.e. checked out anywhere
	  grep --regexp='^  ' |
	  # remove the empty indicator columns
	  cut -c 3- |
	  # select any number of branches with a preview of what they are
	  fzf-tmux -- --ansi --print0 --multi --preview="git log {} --" |
	  # remove all in one go
	  xargs -0 git branch --delete --force
}
